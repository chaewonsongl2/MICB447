livingroom_counts <- taxa_sums(livingroom)
relative_abundance_livingroom <- calculate_relative_abundance(livingroom_counts)
abundant_livingroom <- relative_abundance_livingroom > 0.0005
abundant_livingroom_taxa <- prune_taxa(abundant_livingroom, livingroom)
# Step 6
abundant_livingroom_genera <- tax_glom(abundant_livingroom_taxa, taxrank = "Genus")
abundant_livingroom_genera
# Step 2
toilet <- subset_samples(physeq, feature == "composting toilet")
# Step 5
toilet_counts <- taxa_sums(toilet)
relative_abundance_toilet <- calculate_relative_abundance(toilet_counts)
abundant_toilet <- relative_abundance_toilet > 0.0005
abundant_toilet_taxa <- prune_taxa(abundant_toilet, toilet)
# Step 6
abundant_toilet_genera <- tax_glom(abundant_toilet_taxa, taxrank = "Genus")
abundant_toilet_genera
# Step 2
featurecontrol <- subset_samples(physeq, feature == "molecularly controls")
# Step 5
featurecontrol_counts <- taxa_sums(featurecontrol)
relative_abundance_featurecontrol <- calculate_relative_abundance(featurecontrol_counts)
abundant_featurecontrol <- relative_abundance_featurecontrol > 0.0005
abundant_featurecontrol_taxa <- prune_taxa(abundant_featurecontrol, featurecontrol)
# Step 6
abundant_featurecontrol_genera <- tax_glom(abundant_featurecontrol_taxa, taxrank = "Genus")
abundant_featurecontrol_genera
```{r}
# Step 2
featurecontrol <- subset_samples(physeq, feature == "molecularly controls")
# Step 5
featurecontrol_counts <- taxa_sums(featurecontrol)
relative_abundance_featurecontrol <- calculate_relative_abundance(featurecontrol_counts)
abundant_featurecontrol <- relative_abundance_featurecontrol > 0.0005
abundant_featurecontrol_taxa <- prune_taxa(abundant_featurecontrol, featurecontrol)
# Step 6
abundant_featurecontrol_genera <- tax_glom(abundant_featurecontrol_taxa, taxrank = "Genus")
abundant_featurecontrol_genera
# Step 2
matcontrol <- subset_samples(physeq, orig_env_material == "water")
# Step 5
matcontrol_counts <- taxa_sums(matcontrol)
relative_abundance_matcontrol <- calculate_relative_abundance(matcontrol_counts)
abundant_matcontrol <- relative_abundance_matcontrol > 0.0005
abundant_matcontrol_taxa <- prune_taxa(abundant_matcontrol, matcontrol)
# Step 6
abundant_matcontrol_genera <- tax_glom(abundant_matcontrol_taxa, taxrank = "Genus")
abundant_matcontrol_genera
sample_data(abundant_matcontrol_genera)$feature <-
factor(sample_data(abundant_gut_genera)$feature,
levels = c("water", "plastic"))
sample_data(abundant_matcontrol_genera)$feature <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("water", "plastic"))
sample_data(abundant_matcontrol_genera)$feature <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("water", "wood"))
sample_data(abundant_matcontro_genera)$feature <-
factor(sample_data(abundant_featurecontrol_genera)$feature,
levels = c("molecularly controls", "living room"))
sample_data(abundant_featurecontrol_genera)$feature <-
factor(sample_data(abundant_featurecontrol_genera)$feature,
levels = c("featurecontrol", "livingroom"))
sample_data(abundant_matcontrol_genera)$feature <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("matcontrol", "wood"))
sample_data(abundant_matcontrol_genera)$feature <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("matcontrol", "plastic"))
View(abundant_bed_genera)
View(abundant_bed_taxa)
View(abundant_featurecontrol_genera)
sample_data(abundant_featurecontrol_genera)$feature <-
factor(sample_data(abundant_featurecontrol_genera)$feature,
levels = c("featurecontrol", "bed"))
sample_data(abundant_featurecontrol_genera)$feature <-
factor(sample_data(abundant_featurecontrol_genera)$feature,
levels = c("featurecontrol", "kitchen"))
sample_data(abundant_featurecontrol_genera)$feature <-
factor(sample_data(abundant_featurecontrol_genera)$feature,
levels = c("featurecontrol", "toilet"))
sample_data(abundant_plastic_genera)$feature <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("matcontrol", "plastic"))
sample_data(abundant_plastic_genera)$material <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("matcontrol", "plastic"))
sample_data(abundant_plastic_genera)$orig_env_material <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("matcontrol", "plastic"))
sample_data(abundant_plastic_genera)$orig_env_material <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("matcontrol", "plastic"))
# Step 2
plastic <- subset_samples(physeq, orig_env_material == "plastic")
# Step 5
plastic_counts <- taxa_sums(plastic)
relative_abundance_plastic <- calculate_relative_abundance(plastic_counts)
abundant_plastic <- relative_abundance_plastic > 0.0005
abundant_plastic_taxa <- prune_taxa(abundant_plastic, plastic)
# Step 6
abundant_plastic_genera <- tax_glom(abundant_plastic_taxa, taxrank = "Genus")
abundant_plastic_genera
# Step 2
plastic <- subset_samples(physeq, orig_env_material == "plastic")
# Step 5
plastic_counts <- taxa_sums(plastic)
relative_abundance_plastic <- calculate_relative_abundance(plastic_counts)
abundant_plastic <- relative_abundance_plastic > 0.0005
abundant_plastic_taxa <- prune_taxa(abundant_plastic, plastic)
# Step 6
abundant_plastic_genera <- tax_glom(abundant_plastic_taxa, taxrank = "Genus")
abundant_plastic_genera
sample_data(abundant_plastic_genera)$orig_env_material <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("matcontrol", "plastic"))
# Step 2
plastic <- subset_samples(physeq, orig_env_material == "plastic")
# Step 5
plastic_counts <- taxa_sums(plastic)
relative_abundance_plastic <- calculate_relative_abundance(plastic_counts)
abundant_plastic <- relative_abundance_plastic > 0.0005
abundant_plastic_taxa <- prune_taxa(abundant_plastic, plastic)
# Step 6
abundant_plastic_genera <- tax_glom(abundant_plastic_taxa, taxrank = "Genus")
abundant_plastic_genera
sample_data(abundant_plastic_genera)$orig_env_material <-
factor(sample_data(abundant_matcontrol_genera)$orig_env_material,
levels = c("matcontrol", "plastic"))
sample_data(abundant_plastic_genera)$feature <-
factor(sample_data(abundant_matcontrol_genera)$feature,
levels = c("matcontrol", "plastic"))
sample_data(abundant_plastic_genera)$feature <-
factor(sample_data(abundant_plastic_genera)$feature,
levels = c("matcontrol", "plastic"))
sample_data(abundant_plastic_genera)$orig_env_material <-
factor(sample_data(abundant_plastic_genera)$orig_env_material,
levels = c("matcontrol", "plastic"))
# Step 2
wood <- subset_samples(physeq, orig_env_material == "wood")
# Step 5
wood_counts <- taxa_sums(wood)
relative_abundance_wood <- calculate_relative_abundance(wood_counts)
abundant_wood <- relative_abundance_wood > 0.0005
abundant_wood_taxa <- prune_taxa(abundant_wood, wood)
# Step 6
abundant_wood_genera <- tax_glom(abundant_wood_taxa, taxrank = "Genus")
abundant_wood_genera
sample_data(abundant_wood_genera)$orig_env_material <-
factor(sample_data(abundant_wood_genera)$orig_env_material,
levels = c("matcontrol", "wood"))
# Step 2
kitchen <- subset_samples(physeq, feature == "indoor kitchen")
# Step 5
kitchen_counts <- taxa_sums(kitchen)
relative_abundance_kitchen <- calculate_relative_abundance(kitchen_counts)
abundant_kitchen <- relative_abundance_kitchen > 0.0005
abundant_kitchen_taxa <- prune_taxa(abundant_kitchen, kitchen)
# Step 6
abundant_kitchen_genera <- tax_glom(abundant_kitchen_taxa, taxrank = "Genus")
abundant_kitchen_genera
sample_data(abundant_kitchen_genera)$feature <-
factor(sample_data(abundant_kitchen_genera)$feature,
levels = c("featurecontrol", "kitchen"))
# Step 2
bed <- subset_samples(physeq, feature == "bed base")
# Step 5
bed_counts <- taxa_sums(bed)
relative_abundance_bed <- calculate_relative_abundance(bed_counts)
abundant_bed <- relative_abundance_bed > 0.0005
abundant_bed_taxa <- prune_taxa(abundant_bed, bed)
# Step 6
abundant_bed_genera <- tax_glom(abundant_bed_taxa, taxrank = "Genus")
abundant_bed_genera
sample_data(abundant_bed_genera)$feature <-
factor(sample_data(abundant_bed_genera)$feature,
levels = c("featurecontrol", "bed"))
# Step 2
livingroom <- subset_samples(physeq, feature == "living room")
# Step 5
livingroom_counts <- taxa_sums(livingroom)
relative_abundance_livingroom <- calculate_relative_abundance(livingroom_counts)
abundant_livingroom <- relative_abundance_livingroom > 0.0005
abundant_livingroom_taxa <- prune_taxa(abundant_livingroom, livingroom)
# Step 6
abundant_livingroom_genera <- tax_glom(abundant_livingroom_taxa, taxrank = "Genus")
abundant_livingroom_genera
sample_data(abundant_livingroom_genera)$feature <-
factor(sample_data(abundant_livingroom_genera)$feature,
levels = c("featurecontrol", "living"))
# Step 2
toilet <- subset_samples(physeq, feature == "composting toilet")
# Step 5
toilet_counts <- taxa_sums(toilet)
relative_abundance_toilet <- calculate_relative_abundance(toilet_counts)
abundant_toilet <- relative_abundance_toilet > 0.0005
abundant_toilet_taxa <- prune_taxa(abundant_toilet, toilet)
# Step 6
abundant_toilet_genera <- tax_glom(abundant_toilet_taxa, taxrank = "Genus")
abundant_toilet_genera
sample_data(abundant_toilet_genera)$feature <-
factor(sample_data(abundant_toilet_genera)$feature,
levels = c("featurecontrol", "toilet"))
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material") +
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
# Postion a ellipses around each group of data, `type` determines how centre
# is determined, `size` the thickness of the line
stat_ellipse(type = "norm", size = 0.5)+
# Add custom text to plot, define placement and size with `x`, `y` and `size`
annotate(geom = "text",
label = "My great label",
x = -0.08,
y = 0.18,
size = 4) +
# Manually adjust colours and labels (here changed to first letter uppercase)
scale_colour_manual(values = c("blue", "red"),
labels = c("wood", "plastic")) +
# Themes change the basic look of your plot
# Rename the title of your legend
guides(color = guide_legend("Material"))
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material") +
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
# Postion a ellipses around each group of data, `type` determines how centre
# is determined, `size` the thickness of the line
stat_ellipse(type = "norm", size = 0.5)+
# Add custom text to plot, define placement and size with `x`, `y` and `size`
annotate(geom = "text",
label = "My great label",
x = -0.08,
y = 0.18,
size = 2) +
# Manually adjust colours and labels (here changed to first letter uppercase)
scale_colour_manual(values = c("blue", "red"),
labels = c("wood", "plastic")) +
# Themes change the basic look of your plot
# Rename the title of your legend
guides(color = guide_legend("Material"))
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material") +
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
# Postion a ellipses around each group of data, `type` determines how centre
# is determined, `size` the thickness of the line
stat_ellipse(type = "norm", size = 0.5)+
# Manually adjust colours and labels (here changed to first letter uppercase)
scale_colour_manual(values = c("blue", "red"),
labels = c("wood", "plastic")) +
# Themes change the basic look of your plot
# Rename the title of your legend
guides(color = guide_legend("Material"))
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
# Postion a ellipses around each group of data, `type` determines how centre
# is determined, `size` the thickness of the line
stat_ellipse(type = "norm", size = 0.5)+
# Add custom text to plot, define placement and size with `x`, `y` and `size`
annotate(geom = "text",
label = "My great label",
x = -0.08,
y = 0.18,
size = 2) +
# Manually adjust colours and labels (here changed to first letter uppercase)
scale_colour_manual(values = c("blue", "red", "black", "green"),
labels = c("wood", "plastic", "samplingequipment", "water")) +
# Themes change the basic look of your plot
# Rename the title of your legend
guides(color = guide_legend("Material"))
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 0.5)+
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 0.5)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 0.5)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 0.5)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 0.5)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 10)
biom_file <- import_biom("table-with-taxonomy.biom")
metadata  <- import_qiime_sample_data("hiseas_metadata.txt")
tree      <- read_tree_greengenes("tree.nwk")
# Convert from multichotomous to dichotmous tree
tree <- multi2di(tree)
# Combine all information into a single phyloseq object
physeq <- merge_phyloseq(biom_file, metadata, tree)
physeq_rar <- rarefy_even_depth(physeq, sample.size = 5500)
ord <- ordinate(physeq_rar, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 10)
ord <- ordinate(physeq_rar, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq_rar,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 10)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()
stat_ellipse(type = "norm", size = 10)
deseq_material <- phyloseq_to_deseq2(abundant_material_genera, ~ subject)
deseq_plastic <- phyloseq_to_deseq2(abundant_plastic_genera, ~ subject)
deseq_plastic <- phyloseq_to_deseq2(abundant_plastic_genera, ~ orig_env_material)
ord <- ordinate(physeq_rar, method = "PCoA", distance = "wunifrac")
ord <- ordinate(physeq_rar, method = "PCoA", distance = "wunifrac")
biom_file <- import_biom("table-with-taxonomy.biom")
#### R SCRIPT - HISEAS DATASET - ALPHA DIVERSITY PLOTS
# Load CRAN packages
library(tidyverse)
library(vegan)
library(ape)
# Load Bioconductor packages
library(phyloseq)
# Load additional ggplot packages
library(ggplot2)
library(ggthemes)
# Define the set of random numbers
set.seed(800)
# Define name of metadata file
metadata_file <- "hiseas_metadata.txt"
# Load the metadata file
biom_file <- import_biom("table-with-taxonomy.biom")
metadata  <- import_qiime_sample_data("hiseas_metadata.txt")
tree      <- read_tree_greengenes("tree.nwk")
# Convert from multichotomous to dichotmous tree
tree <- multi2di(tree)
# Combine all information into a single phyloseq object
physeq <- merge_phyloseq(biom_file, metadata, tree)
physeq_rar <- rarefy_even_depth(physeq, sample.size = 30000)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
stat_ellipse(type = "norm", size = 10)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
stat_ellipse(type = "norm", size = 1)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
a <- plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
stat_ellipse(type = "norm", size = 1)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
a <- plot_ordination(physeq,
ord,
color = "orig_env_material")
# Define title of plot
a+labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
stat_ellipse(type = "norm", size = 1)
ord <- ordinate(physeq, method = "PCoA", distance = "wunifrac")
plot_ordination(physeq,
ord,
color = "orig_env_material")+
# Define title of plot
labs(title = "PCoA (weighted UniFrac)") +
theme_bw()+
stat_ellipse(type = "norm", size = 1)
#Load Microeco CRAN Packages
library(here)
library(tidyverse)
library(microeco)
library(cowplot)
library(file2meco)
library(picante)
library(GUniFrac)
library(ggalluvial)
library(ggh4x)
library(ggpubr)
library(randomForest)
library(igraph)
library(rgexf)
library(htmlwidgets)
## set.seed is used to fix the random number generation to make the results repeatable
set.seed(800)
theme_set(theme_bw(base_size=18))
calculate_relative_abundance <- function(x) x/sum(x)
#Import qza artifacts to microeco
(meco_data<-qiime2meco(
ASV_data=here::here("hiseas_table.qza"),
phylo_tree=here::here("hiseas_rooted-tree"),
taxonomy_data=here::here("hiseas_taxonomy.qza"),
sample_data = here::here("hiseas_metadata.txt")))
#Import qza artifacts to microeco
(meco_data<-qiime2meco(
ASV_data=here::here("hiseas_table.qza"),
phylo_tree=here::here("hiseas_rooted-tree.qza"),
taxonomy_data=here::here("hiseas_taxonomy.qza"),
sample_data = here::here("hiseas_metadata.txt")))
#Import qza artifacts to microeco
(meco_data<-qiime2meco(
ASV_data=here::here("hiseas_table.qza"),
phylo_tree=here::here("hiseas_rooted-tree.qza"),
taxonomy_data=here::here("hiseas_taxonomy.qza"),
sample_data=here::here("hiseas_metadata.txt")))
#### R SCRIPT - HISEAS DATASET - ALPHA DIVERSITY PLOTS
# Load CRAN packages
library(tidyverse)
library(vegan)
library(ape)
# Load Bioconductor packages
library(phyloseq)
# Load additional ggplot packages
library(ggplot2)
library(ggthemes)
# Define the set of random numbers
set.seed(800)
# Define name of metadata file
metadata_file <- "hiseas_metadata.txt"
# Load the metadata file
# Load CRAN packages
library(tidyverse)
library(vegan)
library(ape)
# Load Bioconductor packages
library(phyloseq)
library(DESeq2)
git config --global --edit
